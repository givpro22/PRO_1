<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no">
    <title>Interactive Map with Image Upload</title>
    <script src="https://oapi.map.naver.com/openapi/v3/maps.js?ncpClientId=4g9jmh77mh&language=en"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">    
    <style>
        
        body, html {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
        }
        
        #map {
            width: 100%;
            height: 100%;
            position: relative;
            z-index: 1;
        }
        
        /* 피드백 폼 컨테이너 */
        #feedback-form-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 0; /* 기본적으로 숨김 */
            height: 100%;
            background-color: #ffffff;
            overflow: hidden; /* 폼 내용을 완전히 숨김 */
            padding: 0; /* 기본적으로 내부 여백 제거 */
            transition: width 0.3s ease-in-out, padding 0.3s ease-in-out;
            z-index: 9999;
            box-shadow: 2px 0 8px rgba(0, 0, 0, 0.2);
        }
        
        #feedback-form-container.open {
            width: 30%;
            max-width: 400px;
        }
        
        @media screen and (max-width: 768px) {
            #feedback-form-container.open {
                width: 100%; /* 화면 꽉 차게 */
                max-width: none; /* max-width 제한 제거 */
            }
        }
        
        /* 피드백 버튼 */
        #feedback-toggle-btn {
            position: fixed;
            bottom: 20px;
            left: 20px;
            z-index: 10000; /* 모든 요소 위에 표시 */
            border-radius: 50px;
            padding: 10px 20px;
            font-size: 16px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .feedback-form h4 {
            text-align: center;
            color: #4CAF50;
            margin-bottom: 20px; /* 제목 아래 여백 */
            font-size: 1.5rem;
            font-weight: bold;
        }

        .feedback-form .form-label {
            font-size: 1rem;
            color: #555;
            margin-bottom: 5px;
        }
        
        .feedback-form .form-control {
            padding: 10px;
            border-radius: 6px;
            border: 1px solid #ddd;
            font-size: 0.9rem;
            margin-bottom: 15px; /* 입력 필드 간 간격 */
        }
        
        .feedback-form textarea {
            resize: none;
        }
        
        .feedback-form button {
            font-size: 1rem;
            padding: 10px 20px;
            border-radius: 6px;
            background-color: #4CAF50;
            border: none;
            color: #fff;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        
        .feedback-form button:hover {
            background-color: #45a049;
        }
        
        /* 모바일에서 피드백 버튼 */
        #feedback-toggle-btn {
            background-color: #28a745;
            color: white;
            font-size: 1.2rem;
            padding: 10px 15px;
            transition: transform 0.3s ease;
        }
        
        #feedback-toggle-btn:active {
            transform: scale(0.95);
        }
        
        footer {
            text-align: center;
            font-size: 0.85rem;
            color: #777;
            margin-top: 20px;
        }

        .btn-primary {
            background-color: #4CAF50;
            border-color: #4CAF50;
        }

        .info-window {
            width: 320px;
            padding: 10px;
            background-color: #f9f9f9;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .image-slider {
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            margin-bottom: 15px;
        }

        .image-slider div {
            cursor: pointer;
        }

        .left-image, .right-image {
            width: 80px;
            height: 80px;
            overflow: hidden;
            border-radius: 5px;
            margin: 0 5px;
        }

        .main-image {
            width: 200px;
            height: 120px;
            overflow: hidden;
            border-radius: 8px;
        }
        .image-info p {
            margin: 5px 0;
            font-size: 0.9rem;
            color: #555;
        }
        .rating-container .star {
            font-size: 1.5rem;
        }
        
        .image-slider img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        h3 {
            margin: 8px 0;
        }

        .rating-container {
            margin: 10px 0;
            display: flex;
            justify-content: center;
            gap: 5px;
        }

        .rating-container .star {
            font-size: 20px;
            cursor: pointer;
            color: #ccc;
        }

        .rating-container .star.selected {
            color: #FFD700;
        }

        .info-window form input[type="file"] {
            margin-bottom: 10px;
            font-size: 12px;
        }

        .preview-container {
            margin: 10px 0;
        }

        .preview-container img {
            max-width: 100%;
            height: auto;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            display: none;
        }

        .info-window form input[type="submit"] {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s ease;
        }

        .info-window form input[type="submit"]:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>

<div id="map" data-images='<%= JSON.stringify(images) %>'></div>

<div id="feedback-form-container">
    <div class="feedback-form">
        <h4>Feedback Form</h4>
        <form method="POST" action="/coffee">
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <input type="text" class="form-control" id="name" name="name" placeholder="Enter your name" required>
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email Address</label>
                <input type="email" class="form-control" id="email" name="email" placeholder="Enter your email" required>
            </div>
            <div class="mb-3">
                <label for="phone" class="form-label">Phone Number</label>
                <input type="tel" class="form-control" id="phone" name="phone" placeholder="Enter your phone number">
            </div>
            <div class="mb-3">
                <label for="feedback" class="form-label">Suggestions</label>
                <textarea class="form-control" id="feedback" name="feedback" rows="4" placeholder="Enter your suggestions or feedback" required></textarea>
            </div>
            <div class="d-grid">
                <button type="submit" class="btn btn-primary">Submit Feedback</button>
            </div>
        </form>
    </div>
    <footer>
        &copy; 2024 Togather - All Rights Reserved
    </footer>
</div>

<!-- 피드백 버튼 -->
<button id="feedback-toggle-btn" class="btn btn-primary">Feedback</button>

<script>
    const feedbackToggleBtn = document.getElementById('feedback-toggle-btn');
const feedbackFormContainer = document.getElementById('feedback-form-container');

// 버튼 클릭 시 피드백 창 열기/닫기
feedbackToggleBtn.addEventListener('click', () => {
    feedbackFormContainer.classList.toggle('open');
});

    const mapOptions = {
        center: new naver.maps.LatLng(35.174444, 126.908611),
        zoom: 15,
        logoControl: false
    };
    const map = new naver.maps.Map('map', mapOptions);

    const mapElement = document.getElementById('map');
    const images = JSON.parse(mapElement.getAttribute('data-images')) || [];

    const createMarker = (position, icon) => {
        return new naver.maps.Marker({
            position,
            map,
            icon
        });
    };

    const createInfoWindowContent = () => {
        const container = document.createElement('div');
        container.className = 'info-window';
    
        // 이미지 슬라이더 생성
        const sliderContainer = document.createElement('div');
        sliderContainer.className = 'image-slider';
    
        let currentIndex = 0;
    
        const title = document.createElement('div');
        title.className = 'image-info';
    
        // 사용자 정보
        const userInfo = document.createElement('p');
        userInfo.className = 'user-info';
        userInfo.innerHTML = `<strong>Uploaded by:</strong> ${
            images.length > 0 ? images[currentIndex].createUser : "Unknown"
        }`;
    
        // 국가 정보
        const countryInfo = document.createElement('p');
        countryInfo.className = 'country-info';
        countryInfo.innerHTML = `<strong>Country:</strong> ${
            images.length > 0 ? images[currentIndex].createuserCountry : "Unknown"
        }`;
    
        // 업로드 날짜
        const dateInfo = document.createElement('p');
        dateInfo.className = 'date-info';
        dateInfo.innerHTML = `<strong>Uploaded on:</strong> ${
            images.length > 0
                ? new Date(images[currentIndex].createdAt).toLocaleDateString()
                : "Unknown"
        }`;
    
        title.appendChild(userInfo);
        title.appendChild(countryInfo);
        title.appendChild(dateInfo);
    
        container.appendChild(title);
    
        // 별점 표시 추가
        const ratingDisplay = document.createElement('div');
        ratingDisplay.className = 'rating-display';
        container.appendChild(ratingDisplay);
    
        const updateSlider = () => {
            const mainImage = sliderContainer.querySelector('.main-image img');
            const leftImage = sliderContainer.querySelector('.left-image img');
            const rightImage = sliderContainer.querySelector('.right-image img');
    
            mainImage.src = images[currentIndex].fileUrl;
            leftImage.src = images[(currentIndex - 1 + images.length) % images.length].fileUrl;
            rightImage.src = images[(currentIndex + 1) % images.length].fileUrl;
    
            // 정보 업데이트
            userInfo.innerHTML = `<strong>Uploaded by:</strong> ${
                images[currentIndex].createUser || "Unknown"
            }`;
            countryInfo.innerHTML = `<strong>Country:</strong> ${
                images[currentIndex].createuserCountry || "Unknown"
            }`;
            dateInfo.innerHTML = `<strong>Uploaded on:</strong> ${
                images[currentIndex].createdAt
                    ? new Date(images[currentIndex].createdAt).toLocaleDateString()
                    : "Unknown"
            }`;
    
            // 별점 업데이트
            const rating = images[currentIndex]?.meta?.rating || 0;
            ratingDisplay.innerHTML = "⭐".repeat(rating) || "No rating yet";
        };
    
        const leftDiv = document.createElement('div');
        leftDiv.className = 'left-image';
        const leftImg = document.createElement('img');
        leftDiv.appendChild(leftImg);
        sliderContainer.appendChild(leftDiv);
    
        const mainDiv = document.createElement('div');
        mainDiv.className = 'main-image';
        const mainImg = document.createElement('img');
        mainDiv.appendChild(mainImg);
        sliderContainer.appendChild(mainDiv);
    
        const rightDiv = document.createElement('div');
        rightDiv.className = 'right-image';
        const rightImg = document.createElement('img');
        rightDiv.appendChild(rightImg);
        sliderContainer.appendChild(rightDiv);
    
        leftDiv.addEventListener('click', () => {
            currentIndex = (currentIndex - 1 + images.length) % images.length;
            updateSlider();
        });
    
        rightDiv.addEventListener('click', () => {
            currentIndex = (currentIndex + 1) % images.length;
            updateSlider();
        });
    
        updateSlider();
        container.appendChild(sliderContainer);
    
        // 별점 UI
        const ratingContainer = document.createElement('div');
        ratingContainer.className = 'rating-container';
    
        const ratingInput = document.createElement('input');
        ratingInput.type = 'hidden';
        ratingInput.name = 'rating';
        ratingInput.value = '0';
    
        for (let i = 1; i <= 5; i++) {
            const star = document.createElement('span');
            star.className = 'star';
            star.textContent = '★';
            star.dataset.value = i;
    
            star.addEventListener('click', () => {
                ratingInput.value = i;
                Array.from(ratingContainer.children).forEach((s) => {
                    s.classList.toggle('selected', s.dataset.value <= i);
                });
            });
    
            ratingContainer.appendChild(star);
        }
    
        container.appendChild(ratingContainer);
    
        // 이미지 업로드
        const form = document.createElement('form');
        form.method = 'POST';
        form.enctype = 'multipart/form-data';
    
        const inputFile = document.createElement('input');
        inputFile.type = 'file';
        inputFile.accept = 'image/*';
        inputFile.required = true;
    
        const previewContainer = document.createElement('div');
        previewContainer.className = 'preview-container';
    
        const previewImage = document.createElement('img');
        previewContainer.appendChild(previewImage);
    
        inputFile.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (event) => {
                    previewImage.src = event.target.result;
                    previewImage.style.display = 'block';
                };
                reader.readAsDataURL(file);
            } else {
                previewImage.style.display = 'none';
            }
        });
    
        form.appendChild(previewContainer);
        form.appendChild(inputFile);
    
        const submitButton = document.createElement('input');
        submitButton.type = 'submit';
        submitButton.value = 'Upload Image';
    
        form.appendChild(submitButton);
        container.appendChild(form);
    
        return container;
    };
    
    

    const addInfoWindowToMarker = (marker) => {
        const infoWindow = new naver.maps.InfoWindow({
            content: createInfoWindowContent()
        });

        let isOpen = false;
        naver.maps.Event.addListener(marker, 'click', () => {
            if (isOpen) {
                infoWindow.close();
            } else {
                infoWindow.open(map, marker);
            }
            isOpen = !isOpen;
        });
    };

    const mainMarker = createMarker(new naver.maps.LatLng(35.174444, 126.908611));
    addInfoWindowToMarker(mainMarker);
</script>

</body>
</html>
